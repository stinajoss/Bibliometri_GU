import pandas as pd
import geopandas as gpd
import folium
import psycopg2
 
# Establishing a connection to the PostgreSQL database
dbname = '-'
user = '-'
password = '-'
host = '-'
port = '-'
 
with psycopg2.connect(dbname=dbname, user=user, password=password, host=host, port=port) as conn:
    # Example query to retrieve data from the database
    query = """
        SELECT 
            COUNT(DISTINCT ia.isi_id) AS distinct_count,
            CASE
                WHEN ia.country = 'Scotland' OR ia.country = 'England' OR ia.country = 'Wales' OR ia.country = 'North Ireland' THEN 'United Kingdom'
                WHEN ia.country = 'Sweden;' THEN 'Sweden'
                WHEN ia.country = 'U Arab Emirates' THEN 'United Arab Emirates'
                WHEN ia.country = 'Bosnia & Herceg' THEN 'Bosnia and Herzegovina'
                WHEN ia.country = 'DEM REP CONGO' THEN 'Democratic Republic of the Congo'
                WHEN ia.country = 'Cote Ivoire' THEN 'Ivory Coast'
                WHEN ia.country = 'Dominican Rep' THEN 'Dominican Republic'
                WHEN ia.country = 'BELARUS' THEN 'Belarus'
                WHEN ia.country = 'Turkiye' THEN 'Turkey'
                WHEN ia.country = 'Cent Afr Republ' THEN 'Central African Republic'
                WHEN ia.country = 'Rep Congo' THEN 'Congo'
                WHEN ia.country = 'Guinea Bissau' THEN 'Guinea-Bissau'
                WHEN ia.country = 'St Lucia' THEN 'Saint Lucia'
                WHEN ia.country = 'Equat Guinea' THEN 'Equatorial Guinea'
                WHEN ia.country = 'Papua N Guinea'  THEN 'Papua New Guinea'
                WHEN ia.country= 'Trinidad Tobago' THEN 'Trinidad and Tobago'
                WHEN ia.country= 'USA' THEN 'United States of America'
                WHEN ia.country= 'Czech Republic' THEN 'Czechia'
                -- Add more country mappings as needed
                ELSE ia.country
            END AS country
        FROM 
            extra.isi_address AS ia
            JOIN extra.isi_main AS im ON ia.isi_id = im.isi_id
        WHERE 
            ia.country <> 'Sweden'
            AND ia.country <> 'Kosovo'
            AND im.py_field in ('2018','2019','2020','2021','2022')
        GROUP BY 
            ia.country
        ORDER BY 
            distinct_count DESC;
    """
# Fetching the results into a Pandas DataFrame
df = pd.read_sql(query, conn)
 
#Displaying dataframe
display(df)
 
# Load the world map GeoDataFrame directly from Natural Earth data
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
 
# Merge your DataFrame with the GeoDataFrame
merged = world.merge(df, how='left', left_on='name', right_on='country')
 
# Fill NaN values (countries without data) with a default value
merged['distinct_count'].fillna(0, inplace=True)
 
# Ensure the 'distinct_count' column is numeric
merged['distinct_count'] = pd.to_numeric(merged['distinct_count'], errors='coerce')
 
# Create a Folium map centered at the mean coordinates
map_center = [merged.geometry.centroid.y.mean(), merged.geometry.centroid.x.mean()]
m = folium.Map(location=map_center, zoom_start=2)
 
# Add choropleth layer to the map
folium.Choropleth(
    geo_data=merged,
    name='choropleth',
    data=merged,
    columns=['name', 'distinct_count'],
    key_on='feature.properties.name',
    fill_color='YlGnBu',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Distinct Counts by Country'
).add_to(m)
 
# Add a hover effect to display information about the country
style_function = lambda x: {'fillColor': '#ffffff', 'color': '#000000', 'fillOpacity': 0.1, 'weight': 0.1}
highlight_function = lambda x: {'fillColor': '#000000', 'color': '#000000', 'fillOpacity': 0.50, 'weight': 0.1}
info = folium.features.GeoJson(merged, style_function=style_function, control=False, highlight_function=highlight_function, tooltip=folium.features.GeoJsonTooltip(
    fields=['name', 'distinct_count'],
    aliases=['Country:', 'Distinct Count:'],
    localize=True,
    sticky=True,
)).add_to(m)
 
# Create a separate HTML table for the frequency table
freq_table_html = df.to_html(classes='table table-striped table-hover table-condensed')
 
# Add a custom HTML element with the frequency table below the map
folium.Html(freq_table_html, script=True).add_to(m)
 
# Show the map
m
